// Firestore Security Rules for React Native (Expo) project
// Ensures proper access control for users, goals, activities, and places

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection and all subcollections
    // Users can only access their own documents and subcollections
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Specific rules for user goals subcollection
    // Provides more granular control if needed
    match /users/{userId}/goals/{goalId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Specific rules for user activities subcollection
    // Ensures activities can only be accessed by the goal owner
    match /users/{userId}/activities/{activityId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Specific rules for user calendar events subcollection
    // Ensures calendar events can only be accessed by the user
    match /users/{userId}/calendarEvents/{eventId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Debug subcollection for connectivity testing
    // Users can ping their own debug documents
    match /users/{userId}/__debug__/{debugDoc} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Verifications collection - user-specific access
    // Users can only access their own verifications
    match /verifications/{verificationId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && (request.method != 'update' || request.resource.data.userId == resource.data.userId);
    }
    
    // Goals collection (legacy/global) - user-specific access
    // Users can only access their own goals
    match /goals/{goalId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && (request.method != 'update' || request.resource.data.userId == resource.data.userId);
    }
    
    // Places index collection - globally readable for location search
    // Only admins can write (requires custom claims)
    match /placesIndex/{placeId} {
      allow read: if true; // Anyone can read places for location search
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Example custom claims structure for admin users:
// {
//   "admin": true,
//   "moderator": false
// }
//
// These claims can be set server-side using Firebase Admin SDK:
// admin.auth().setCustomUserClaims(uid, { admin: true });
